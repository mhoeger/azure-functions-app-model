import { AzureFunction, Context } from "@azure/functions"

export class HostConfig {
    version: string = "2.0";

    logging?: {
        logLevel?: {
            default?: string
        }
    };
}

export class FunctionApp extends HostConfig {
    private count = 1;
    private _middleware = async (context) => { };
    private _endware = async(context) => { };

    addFunction(func: Function): FunctionApp {
        // this[`Function${this.count}-${trigger.id}`] = code;
        this[`${func.name}`] = func.getCode();
        return this;
    }

    function(func: Function2<Trigger>): FunctionApp {
        let funcCode = func.getCode();
        this[`${func.getName()}${this.count++}`] = async (context, ...args) => {
            let finalValue = null;
            let next = () => { finalValue = funcCode(context, ...args) };

            let previousDone = context.done;
            let wrappedDone = (err, result) => {
                this._endware(context);
                // actual done
                previousDone(err, result);
            }
            await this._middleware(context);
            context.done = wrappedDone;
            return funcCode(context, ...args); 
        };
        return this;
    }

    // onTrigger<HttpTrigger>(name: string, methods: string[], deleteHeros): FunctionApp
    // {
    //     let t = new HttpTrigger(name, methods);
    //     let f = new Function("HttpTrigger", t);
    //     f.onTrigger(deleteHeros);
    //     this.addFunction(f);
    //     return this;
    // }

    create2<T> (C: new (...args: any[]) => T, ...args: any[]) {
        return new C(args);
    }

    // use(middleware: (context: Context) => void | Promise<void>): FunctionApp;
    // use(middleware: (req: any, res: any) => void | Promise<void>): FunctionApp;
    // use(middleware: any): FunctionApp {
    //     let previousMiddle = this._middleware;
    //     this._middleware = async (context) => {
    //         await previousMiddle(context);
    //         await middleware(context);
    //     }
    //     return this;
    // }

    pre(middleware: any): FunctionApp {
        let previousMiddle = this._middleware;
        this._middleware = async (context) => {
            await previousMiddle(context);
            await middleware(context);
        }
        return this;
    }

//     use(color: string, percent: number): string;
//     use(color: RGB, percent: number): RGB;
// function colorShade(color: RGB | string, percent: number): RGB | string {
//   ...
// }

    // express middleware "use"
    use(middleware: any):FunctionApp {
        let previousMiddle = this._middleware;
        this._middleware = async (context) => {
            await previousMiddle(context);
            let { req, res } = context;
            await middleware(req, res, () => {});
        }
        return this;
    }

    post(endware: any): FunctionApp {
        let previousEnd = this._endware;
        this._endware = async (context) => {
            await endware(context);
            await previousEnd(context);
        }
        return this;
    }

    run() {
        return this;
    }
}

class GenericNumber<T> {
    zeroValue: T;
    add: (x: T, y: T) => T;
}

export interface Trigger {
    getId(): string;
}

export class HttpTrigger implements Trigger {
    public id = "HttpTrigger";
    private route: string;
    private methods: string[];
    constructor(route: string, methods: string[]) {
        this.route = route;
        this.methods = methods;
    }

    getId(): string {
        return this.id;
    }
}

export class SecondTrigger {
    public id = "SecondTrigger";
    private route: string;
    private methods: string[];
    constructor(route: string, methods: string[]) {
        this.route = route;
        this.methods = methods;
    }
}

export abstract class Function {
    private triggerType: HttpTrigger;
    private code: AzureFunction;
    private inputBindings: BlobInput[] = [];
    public name: string;
    constructor(name: string, trigger: HttpTrigger) {
        this.triggerType = trigger;
        this.name = name;
    }

    bindInputs(input: BlobInput[]): Function {
        this.inputBindings.concat(input);
        return this;
    }

    onTrigger(code: AzureFunction): Function {
        this.code = code;
        return this;
    }

    getCode(): AzureFunction {
        return this.code;
    }
}

export class Function2<T extends Trigger> {
    private triggerType: T;
    private code: AzureFunction;
    private inputBindings: BlobInput[] = [];
    private name: string;
    constructor(name: string, trigger: T) {
        this.triggerType = trigger;
        this.name = name;
    }

    bindInputs(input: BlobInput[]): Function2<T> {
        this.inputBindings.concat(input);
        return this;
    }

    onTrigger(code: AzureFunction): Function2<T> {
        this.code = code;
        return this;
    }

    getCode(): AzureFunction {
        return this.code;
    }

    getName(): string {
        return this.triggerType.getId();
    }
}

export class HttpTriggerFunction extends Function {
    public id = "HttpTrigger";
    private route: string;
    private methods: string[];

    constructor(route: string, methods: string[]) {
        super(name, null);
        this.route = route;
        this.methods = methods;
    }
}

export class BlobInput {
    private route: string = "";
    constructor(route: string) {
        this.route = route;
    }
}