import { AzureFunction, Context } from "@azure/functions"
const createHandler = require("azure-function-express").createHandler;
const GENERATE_JSON = "AZURE_FUNCTIONS_GENERATE_NODEJS_JSON";
const GENERATE_JSON_VALUE = "TRUE";

export class HostConfig {
    version: string = "2.0";

    logging?: {
        logLevel?: {
            default?: string
        }
    };
}

export class FunctionApp extends HostConfig {
    private count = 1;
    private _middleware = async (context) => { };
    private _endware = async(context) => { };
    private functionConfig = {}

    constructor(express?: any) {
        super();
        // createHandler was created by Yves, with an apache 2.0 license: https://github.com/yvele/azure-function-express
        // I think it has some bugs we need to iron out.
        this['ExpressApp'] = createHandler(express);
    }

    // addFunction(func: Function): FunctionApp {
    //     // this[`Function${this.count}-${trigger.id}`] = code;
    //     this[`${func.name}`] = func.getCode();
    //     return this;
    // }

    onTrigger<T extends Trigger>(trigger: T, func: AzFunction<T>): FunctionApp {
        const funcCode = func.getCode();
        const funcName = `${func.getName()}${this.count++}`;
        this[funcName] = async (context, ...args) => {
            await this._middleware(context);
            return funcCode(context, ...args); 
        };

        if (process.env[GENERATE_JSON] == GENERATE_JSON_VALUE) {
            this.indexConfig<T>(funcName, trigger, func.getBindings());
        }

        return this;
    }

    indexConfig<T extends Trigger>(funcName: string, trigger: T, bindings: Binding[]): void {
        this.functionConfig[funcName] = Object.assign({ bindings: [trigger, bindings] }, this.functionConfig[funcName]);
    }

    pre(middleware: any): FunctionApp {
        let previousMiddle = this._middleware;
        this._middleware = async (context) => {
            await previousMiddle(context);
            await middleware(context);
        }
        return this;
    }

    // express middleware "use"
    use(middleware: any):FunctionApp {
        let previousMiddle = this._middleware;
        this._middleware = async (context) => {
            await previousMiddle(context);
            let { req, res } = context;
            await middleware(req, res, () => {});
        }
        return this;
    }

    // post(endware: any): FunctionApp {
    //     let previousEnd = this._endware;
    //     this._endware = async (context) => {
    //         await endware(context);
    //         await previousEnd(context);
    //     }
    //     return this;
    // }

    // run() {
    //     return this;
    // }
}

class GenericNumber<T> {
    zeroValue: T;
    add: (x: T, y: T) => T;
}

export interface Trigger extends Binding {
    getId(): string;
}

export class HttpTrigger implements Trigger {
    public id = "HttpTrigger";
    private route: string;
    private methods: string[];
    constructor(route: string, methods: string[]) {
        this.route = route;
        this.methods = methods;
    }

    getId(): string {
        return this.id;
    }
}

export class SecondTrigger {
    public id = "SecondTrigger";
    private route: string;
    private methods: string[];
    constructor(route: string, methods: string[]) {
        this.route = route;
        this.methods = methods;
    }
}

// export abstract class Function {
//     private triggerType: HttpTrigger;
//     private code: AzureFunction;
//     private inputBindings: BlobInput[] = [];
//     public name: string;
//     constructor(name: string, trigger: HttpTrigger) {
//         this.triggerType = trigger;
//         this.name = name;
//     }

//     bindInputs(input: BlobInput[]): Function {
//         this.inputBindings.concat(input);
//         return this;
//     }

//     onTrigger(code: AzureFunction): Function {
//         this.code = code;
//         return this;
//     }

//     getCode(): AzureFunction {
//         return this.code;
//     }
// }

export class AzFunction<T extends Trigger> {
    private name: string;
    private code: AzureFunction;
    private inputBindings: Binding[] = [];
    private outputBindings: Binding[] = [];
    constructor(name: string, code: AzureFunction, options?: any) {
        this.name = name;
        this.code = code;
    }

    bindInputs(input: InputBinding[]): AzFunction<T> {
        this.inputBindings.concat(input);
        return this;
    }

    bindOutputs(output: OutputBinding[]): AzFunction<T> {
        this.outputBindings.concat(output);
        return this;
    }

    getBindings(): Binding[] {
        return this.inputBindings.concat(this.outputBindings);
    }

    // onTrigger(code: AzureFunction): AzFunction<T> {
    //     this.code = code;
    //     return this;
    // }

    getCode(): AzureFunction {
        return this.code;
    }

    getName(): string {
        return this.name;
    }
}

export class HttpTriggerFunction extends Function {
    public id = "HttpTrigger";
    private route: string;
    private methods: string[];

    constructor(route: string, methods: string[]) {
        super(name, null);
        this.route = route;
        this.methods = methods;
    }
}

export interface Binding {

}

export interface InputBinding extends Binding {

}

export interface OutputBinding extends Binding {

}

export class BlobInput implements InputBinding {
    private route: string = "";
    constructor(route: string) {
        this.route = route;
    }
}